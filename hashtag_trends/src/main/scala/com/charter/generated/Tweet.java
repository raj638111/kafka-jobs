/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.charter.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Tweet Info */
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7695784411050978095L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"com.charter.generated\",\"doc\":\"Tweet Info\",\"fields\":[{\"name\":\"tweet\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Tweet with Hashtag\"},{\"name\":\"hash_tags\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"All hashtags\"},{\"name\":\"time_stamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Time of the tweet\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tweet> ENCODER =
      new BinaryMessageEncoder<Tweet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tweet> DECODER =
      new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Tweet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Tweet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Tweet to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Tweet from a ByteBuffer. */
  public static Tweet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Tweet with Hashtag */
  @Deprecated public java.lang.String tweet;
  /** All hashtags */
  @Deprecated public java.lang.String hash_tags;
  /** Time of the tweet */
  @Deprecated public java.lang.String time_stamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   * @param tweet Tweet with Hashtag
   * @param hash_tags All hashtags
   * @param time_stamp Time of the tweet
   */
  public Tweet(java.lang.String tweet, java.lang.String hash_tags, java.lang.String time_stamp) {
    this.tweet = tweet;
    this.hash_tags = hash_tags;
    this.time_stamp = time_stamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tweet;
    case 1: return hash_tags;
    case 2: return time_stamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tweet = (java.lang.String)value$; break;
    case 1: hash_tags = (java.lang.String)value$; break;
    case 2: time_stamp = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tweet' field.
   * @return Tweet with Hashtag
   */
  public java.lang.String getTweet() {
    return tweet;
  }

  /**
   * Sets the value of the 'tweet' field.
   * Tweet with Hashtag
   * @param value the value to set.
   */
  public void setTweet(java.lang.String value) {
    this.tweet = value;
  }

  /**
   * Gets the value of the 'hash_tags' field.
   * @return All hashtags
   */
  public java.lang.String getHashTags() {
    return hash_tags;
  }

  /**
   * Sets the value of the 'hash_tags' field.
   * All hashtags
   * @param value the value to set.
   */
  public void setHashTags(java.lang.String value) {
    this.hash_tags = value;
  }

  /**
   * Gets the value of the 'time_stamp' field.
   * @return Time of the tweet
   */
  public java.lang.String getTimeStamp() {
    return time_stamp;
  }

  /**
   * Sets the value of the 'time_stamp' field.
   * Time of the tweet
   * @param value the value to set.
   */
  public void setTimeStamp(java.lang.String value) {
    this.time_stamp = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static com.charter.generated.Tweet.Builder newBuilder() {
    return new com.charter.generated.Tweet.Builder();
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static com.charter.generated.Tweet.Builder newBuilder(com.charter.generated.Tweet.Builder other) {
    return new com.charter.generated.Tweet.Builder(other);
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static com.charter.generated.Tweet.Builder newBuilder(com.charter.generated.Tweet other) {
    return new com.charter.generated.Tweet.Builder(other);
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    /** Tweet with Hashtag */
    private java.lang.String tweet;
    /** All hashtags */
    private java.lang.String hash_tags;
    /** Time of the tweet */
    private java.lang.String time_stamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.charter.generated.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tweet)) {
        this.tweet = data().deepCopy(fields()[0].schema(), other.tweet);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash_tags)) {
        this.hash_tags = data().deepCopy(fields()[1].schema(), other.hash_tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time_stamp)) {
        this.time_stamp = data().deepCopy(fields()[2].schema(), other.time_stamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(com.charter.generated.Tweet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tweet)) {
        this.tweet = data().deepCopy(fields()[0].schema(), other.tweet);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash_tags)) {
        this.hash_tags = data().deepCopy(fields()[1].schema(), other.hash_tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time_stamp)) {
        this.time_stamp = data().deepCopy(fields()[2].schema(), other.time_stamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'tweet' field.
      * Tweet with Hashtag
      * @return The value.
      */
    public java.lang.String getTweet() {
      return tweet;
    }

    /**
      * Sets the value of the 'tweet' field.
      * Tweet with Hashtag
      * @param value The value of 'tweet'.
      * @return This builder.
      */
    public com.charter.generated.Tweet.Builder setTweet(java.lang.String value) {
      validate(fields()[0], value);
      this.tweet = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet' field has been set.
      * Tweet with Hashtag
      * @return True if the 'tweet' field has been set, false otherwise.
      */
    public boolean hasTweet() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tweet' field.
      * Tweet with Hashtag
      * @return This builder.
      */
    public com.charter.generated.Tweet.Builder clearTweet() {
      tweet = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hash_tags' field.
      * All hashtags
      * @return The value.
      */
    public java.lang.String getHashTags() {
      return hash_tags;
    }

    /**
      * Sets the value of the 'hash_tags' field.
      * All hashtags
      * @param value The value of 'hash_tags'.
      * @return This builder.
      */
    public com.charter.generated.Tweet.Builder setHashTags(java.lang.String value) {
      validate(fields()[1], value);
      this.hash_tags = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hash_tags' field has been set.
      * All hashtags
      * @return True if the 'hash_tags' field has been set, false otherwise.
      */
    public boolean hasHashTags() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hash_tags' field.
      * All hashtags
      * @return This builder.
      */
    public com.charter.generated.Tweet.Builder clearHashTags() {
      hash_tags = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_stamp' field.
      * Time of the tweet
      * @return The value.
      */
    public java.lang.String getTimeStamp() {
      return time_stamp;
    }

    /**
      * Sets the value of the 'time_stamp' field.
      * Time of the tweet
      * @param value The value of 'time_stamp'.
      * @return This builder.
      */
    public com.charter.generated.Tweet.Builder setTimeStamp(java.lang.String value) {
      validate(fields()[2], value);
      this.time_stamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'time_stamp' field has been set.
      * Time of the tweet
      * @return True if the 'time_stamp' field has been set, false otherwise.
      */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'time_stamp' field.
      * Time of the tweet
      * @return This builder.
      */
    public com.charter.generated.Tweet.Builder clearTimeStamp() {
      time_stamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.tweet = fieldSetFlags()[0] ? this.tweet : (java.lang.String) defaultValue(fields()[0]);
        record.hash_tags = fieldSetFlags()[1] ? this.hash_tags : (java.lang.String) defaultValue(fields()[1]);
        record.time_stamp = fieldSetFlags()[2] ? this.time_stamp : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tweet>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tweet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tweet>
    READER$ = (org.apache.avro.io.DatumReader<Tweet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
